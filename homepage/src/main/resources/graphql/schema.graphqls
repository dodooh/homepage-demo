type Query {
    getItemById(itemQuery: InputItem): Item
#    findActorsByMovieId(movieId: ID): [ActorByMovie]
#    allActors: [Actor]
#    findMovieByTitle(title: String): Movie
    #    findActorByName(name: String): Actor
}

#type Mutation {
#    createMovie(movie: MovieInput): NewMovie
#}

type LinkPlay{
    id: ID!
    itemId: Int
    url: String
    platform: Platform
}
enum Platform{
    IOS
    ANDROID
}
enum MediaType{
    MOVIE
    PROGRAM
    SPORT
}

type MediaAsset{
    id: ID!
    mediaId: Int
    bannerUrl: String
    posterUrl: String
    thumbnailUrl: String
}

type Item{
    id: ID!
    mediaType: MediaType
    startTime: String
    expiredTime: String
    title: String
    description: String
    mediaAsset: MediaAsset
    actors:[String]
    directors: [String]
    players: [String]
    channelId: Int
    linkPlay: LinkPlay
}

input MediaAssetInput{
    bannerUrl: String
    posterUrl: String
    thumbnailUrl: String
}
input LinkPlayInput{
    url: String
    platform: Platform
}

input Item{
    id: ID!
    mediaType: MediaType
    startTime: String
    expiredTime: String
    title: String
    description: String
    mediaAsset: MediaAssetInput
    linkPlay: LinkPlayInput
    players: [String]
    channelId: Int
    actors:[String]
    directors: [String]
}
input InputItem{
    id: ID!
    platform: Platform!
}
